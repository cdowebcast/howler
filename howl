#!/usr/bin/python -tt
# Copyright (C) 2012 by The Linux Foundation and contributors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import howler

CONFIG = '/etc/howler/howler.ini'

if __name__ == '__main__':
    from ConfigParser import ConfigParser
    from optparse     import OptionParser

    usage = '''usage: %prog [options] userid ip_addr
    This tool records logins by users and alerts admins when they log in
    from a previously unknown location, using GeoIP City database.
    '''

    parser = OptionParser(usage=usage, version=howler.HOWLER_VERSION)
    parser.add_option('--config', dest='config',
        default=CONFIG,
        help='Location of the howler.ini file (%default).')
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true',
        default=False,
        help='Output details to the console in addition to sending mail.')
    parser.add_option('-s', '--hostname', dest='hostname',
        default=None,
        help='Optionally, mention the hostname')
    parser.add_option('-d', '--daemon', dest='daemon',
        default=None,
        help='Optionally, mention the reporting daemon')
    parser.add_option('-c', '--cleanup', dest='cleanup', action='store_true',
        default=False,
        help='Perform cleanup tasks. Ignores all other options.')
    parser.add_option('-n', '--not-after', dest='not_after',
        default=None,
        help='Purge the location associated with this IP after YYYY-MM-DD')

    (opts, args) = parser.parse_args()

    if not opts.cleanup and len(args) != 2:
        parser.error('Please specify userid and ip_addr')

    ini = ConfigParser()
    ini.read(opts.config)
    config = {}
    for (option, value) in ini.items('main'):
        config[option] = value

    config['verbose'] = opts.verbose

    if opts.cleanup:
        howler.cleanup(config)
        sys.exit(0)

    (userid, ip_addr) = args


    if opts.not_after:
        howler.not_after(config, userid, ip_addr, opts.not_after)
        sys.exit(0)

    howler.check(config, userid, ip_addr, hostname=opts.hostname,
                 daemon=opts.daemon)

